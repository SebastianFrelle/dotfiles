/*******************************************************************************
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 ******************************************************************************/
package org.apache.olingo.sample.annotation.util;

import org.apache.olingo.odata2.api.commons.HttpStatusCodes;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.Date;
import java.util.Random;

/**
 * Data generator for annotation sample service.
 */
public class AnnotationSampleDataGenerator {
  public static final String HTTP_METHOD_PUT = "PUT";
  public static final String HTTP_METHOD_POST = "POST";

  public static final String HTTP_HEADER_CONTENT_TYPE = "Content-Type";
  public static final String HTTP_HEADER_ACCEPT = "Accept";
  
  public static final String APPLICATION_JSON = "application/json";

  private static final Logger LOG = LoggerFactory.getLogger(AnnotationSampleDataGenerator.class);
  private static final boolean PRINT_RAW_CONTENT = true;

  public static void main(String[] args) {
    String serviceUrl = "http://localhost:8080/odata.svc";
    if(args.length == 1) {
      serviceUrl = args[0];
    }
    generateData(serviceUrl);
  }

  public static void generateData(String serviceUrl) {
    AnnotationSampleDataGenerator app = new AnnotationSampleDataGenerator();
    app.generateSampleData(serviceUrl);
  }

  public void generateSampleData(String serviceUrl) {
    print("Generate sample data for service on url: " + serviceUrl);
    String usedFormat = APPLICATION_JSON;
    
    String projectOne = "{\"Name\":\"LEADER\"}";
    String projectTwo = "{\"Name\":\"SUSTAIN\"}";
    //PIONEER 1 / PIONEER 2
    String projectUri = serviceUrl + "/Projects";
    createEntity(projectUri, projectOne, usedFormat);
    createEntity(projectUri, projectTwo, usedFormat); 

    String area11 = "{\"Name\":\"ClinRep\"}";
    String area21 = "{\"Name\":\"MedSci\"}";
    String area31 = "{\"Name\":\"TrialOps\"}";
    String area41 = "{\"Name\":\"BA Europe East\"}";
    String area51 = "{\"Name\":\"BA Europe North & Central\"}";
    String area61 = "{\"Name\":\"BA Europe South\"}";
    String area71 = "{\"Name\":\"BANEC\"}";
    String area81 = "{\"Name\":\"Biopharm TrialOps\"}";
    String area91 = "{\"Name\":\"CMR\"}";
    String area101 = "{\"Name\":\"CMR DE\"}";
    String area111 = "{\"Name\":\"CMR EU N&C\"}";
    String area121 = "{\"Name\":\"CMR Operations\"}"; 
    String area131 = "{\"Name\":\"Clinical Development & Outcomes Research\"}"; 
    String area141 = "{\"Name\":\"Clinical Pharmacology\"}"; 
    String area151 = "{\"Name\":\"Clinical Systems Management\"}";  
    String area161 = "{\"Name\":\"Clinical Trial Management\"}";
    String area171 = "{\"Name\":\"EU CMR Medical & Scientific Affairs\"}";
    String area181 = "{\"Name\":\"Global Development - GSC Bangalore\"}";
    String area191 = "{\"Name\":\"Global Medical Affairs\"}";
    String area201 = "{\"Name\":\"Global Regulatory Operations\"}";
    String area211 = "{\"Name\":\"Global Safety\"}";
    String area221 = "{\"Name\":\"Region Europe\"}";
    String area231 = "{\"Name\":\"Strategic Development\"}";
    String area241 = "{\"Name\":\"TrialOps Obesity\"}";

    String areaUri = serviceUrl + "/Areas";
    //createEntity(areaUri, area101, usedFormat);

    createEntity(projectUri + "('LEADER')/Areas", area11, usedFormat);
    createEntity(projectUri + "('LEADER')/Areas", area21, usedFormat);
    createEntity(projectUri + "('LEADER')/Areas", area31, usedFormat);
    createEntity(projectUri + "('LEADER')/Areas", area41, usedFormat);
    createEntity(projectUri + "('LEADER')/Areas", area51, usedFormat);
    createEntity(projectUri + "('LEADER')/Areas", area61, usedFormat);
    createEntity(projectUri + "('LEADER')/Areas", area71, usedFormat);
    createEntity(projectUri + "('LEADER')/Areas", area81, usedFormat);
    createEntity(projectUri + "('LEADER')/Areas", area91, usedFormat);
    createEntity(projectUri + "('LEADER')/Areas", area101, usedFormat);
    createEntity(projectUri + "('LEADER')/Areas", area111, usedFormat);
    createEntity(projectUri + "('LEADER')/Areas", area121, usedFormat);
    createEntity(projectUri + "('LEADER')/Areas", area131, usedFormat);
    createEntity(projectUri + "('LEADER')/Areas", area141, usedFormat);
    createEntity(projectUri + "('LEADER')/Areas", area151, usedFormat);
    createEntity(projectUri + "('LEADER')/Areas", area161, usedFormat);
    createEntity(projectUri + "('LEADER')/Areas", area171, usedFormat);
    createEntity(projectUri + "('LEADER')/Areas", area181, usedFormat);
    createEntity(projectUri + "('LEADER')/Areas", area191, usedFormat);
    createEntity(projectUri + "('LEADER')/Areas", area201, usedFormat);
    createEntity(projectUri + "('LEADER')/Areas", area211, usedFormat);
    createEntity(projectUri + "('LEADER')/Areas", area221, usedFormat);
    createEntity(projectUri + "('LEADER')/Areas", area231, usedFormat);
    createEntity(projectUri + "('LEADER')/Areas", area241, usedFormat);

    createEntity(projectUri + "('SUSTAIN')/Areas", area11, usedFormat);
    createEntity(projectUri + "('SUSTAIN')/Areas", area21, usedFormat);
    createEntity(projectUri + "('SUSTAIN')/Areas", area31, usedFormat);
    createEntity(projectUri + "('SUSTAIN')/Areas", area41, usedFormat);
    createEntity(projectUri + "('SUSTAIN')/Areas", area51, usedFormat);
    createEntity(projectUri + "('SUSTAIN')/Areas", area61, usedFormat);
    createEntity(projectUri + "('SUSTAIN')/Areas", area71, usedFormat);
    createEntity(projectUri + "('SUSTAIN')/Areas", area81, usedFormat);
    createEntity(projectUri + "('SUSTAIN')/Areas", area91, usedFormat);
    createEntity(projectUri + "('SUSTAIN')/Areas", area101, usedFormat);
    createEntity(projectUri + "('SUSTAIN')/Areas", area111, usedFormat);
    createEntity(projectUri + "('SUSTAIN')/Areas", area121, usedFormat);
    createEntity(projectUri + "('SUSTAIN')/Areas", area131, usedFormat);
    createEntity(projectUri + "('SUSTAIN')/Areas", area141, usedFormat);
    createEntity(projectUri + "('SUSTAIN')/Areas", area151, usedFormat);
    createEntity(projectUri + "('SUSTAIN')/Areas", area161, usedFormat);
    createEntity(projectUri + "('SUSTAIN')/Areas", area171, usedFormat);
    createEntity(projectUri + "('SUSTAIN')/Areas", area181, usedFormat);
    createEntity(projectUri + "('SUSTAIN')/Areas", area191, usedFormat);
    createEntity(projectUri + "('SUSTAIN')/Areas", area201, usedFormat);
    createEntity(projectUri + "('SUSTAIN')/Areas", area211, usedFormat);
    createEntity(projectUri + "('SUSTAIN')/Areas", area221, usedFormat);
    createEntity(projectUri + "('SUSTAIN')/Areas", area231, usedFormat);
    createEntity(projectUri + "('SUSTAIN')/Areas", area241, usedFormat);
    //createEntity(areaUri + "('ClinRep')/Project", area11, usedFormat);  

    
    String org1 = "{\"Name\":\"0151\"}";
    String org2 = "{\"Name\":\"0152\"}";
    String org3 = "{\"Name\":\"0153\"}";
    String org4 = "{\"Name\":\"0154\"}";
    String org5 = "{\"Name\":\"0155\"}";
    String org6 = "{\"Name\":\"0156\"}";
    String org7 = "{\"Name\":\"0157\"}";
    String org8 = "{\"Name\":\"0158\"}";
    String org9 = "{\"Name\":\"0159\"}";
    String org10 = "{\"Name\":\"01510\"}";

    String unitUri = serviceUrl + "/OrganisationalUnits";
    
    
    //createEntity(unitUri, org1, usedFormat); 
    //Units for 1st area
    createEntity(areaUri + "('ClinRep')/Units", org1, usedFormat);
    createEntity(areaUri + "('ClinRep')/Units", org2, usedFormat);
    createEntity(areaUri + "('ClinRep')/Units", org3, usedFormat);
    createEntity(areaUri + "('ClinRep')/Units", org4, usedFormat);
    createEntity(areaUri + "('ClinRep')/Units", org5, usedFormat);
    createEntity(areaUri + "('ClinRep')/Units", org6, usedFormat);
    createEntity(areaUri + "('ClinRep')/Units", org7, usedFormat);
    createEntity(areaUri + "('ClinRep')/Units", org8, usedFormat);
    createEntity(areaUri + "('ClinRep')/Units", org9, usedFormat);
    createEntity(areaUri + "('ClinRep')/Units", org10, usedFormat);
    //Units for 2nd area
    createEntity(areaUri + "('MedSci')/Units", org1, usedFormat);
    createEntity(areaUri + "('MedSci')/Units", org2, usedFormat);
    createEntity(areaUri + "('MedSci')/Units", org3, usedFormat);
    createEntity(areaUri + "('MedSci')/Units", org4, usedFormat);
    createEntity(areaUri + "('MedSci')/Units", org5, usedFormat);
    createEntity(areaUri + "('MedSci')/Units", org6, usedFormat);
    createEntity(areaUri + "('MedSci')/Units", org7, usedFormat);
    createEntity(areaUri + "('MedSci')/Units", org8, usedFormat);
    createEntity(areaUri + "('MedSci')/Units", org9, usedFormat);
    createEntity(areaUri + "('MedSci')/Units", org10, usedFormat); 
    //Units for 3rd area
    createEntity(areaUri + "('TrialOps')/Units", org1, usedFormat);
    createEntity(areaUri + "('TrialOps')/Units", org2, usedFormat);
    createEntity(areaUri + "('TrialOps')/Units", org3, usedFormat);
    createEntity(areaUri + "('TrialOps')/Units", org4, usedFormat);
    createEntity(areaUri + "('TrialOps')/Units", org5, usedFormat);
    createEntity(areaUri + "('TrialOps')/Units", org6, usedFormat);
    createEntity(areaUri + "('TrialOps')/Units", org7, usedFormat);
    createEntity(areaUri + "('TrialOps')/Units", org8, usedFormat);
    createEntity(areaUri + "('TrialOps')/Units", org9, usedFormat);
    createEntity(areaUri + "('TrialOps')/Units", org10, usedFormat); 
    //Units for 4th area MISSING FROM HERE
    createEntity(areaUri + "('BA%20Europe%20East')/Units", org1, usedFormat);
    createEntity(areaUri + "('BA%20Europe%20East')/Units", org2, usedFormat);
    createEntity(areaUri + "('BA%20Europe%20East')/Units", org3, usedFormat);
    createEntity(areaUri + "('BA%20Europe%20East')/Units", org4, usedFormat);
    createEntity(areaUri + "('BA%20Europe%20East')/Units", org5, usedFormat);
    createEntity(areaUri + "('BA%20Europe%20East')/Units", org6, usedFormat);
    createEntity(areaUri + "('BA%20Europe%20East')/Units", org7, usedFormat);
    createEntity(areaUri + "('BA%20Europe%20East')/Units", org8, usedFormat);
    createEntity(areaUri + "('BA%20Europe%20East')/Units", org9, usedFormat);
    createEntity(areaUri + "('BA%20Europe%20East')/Units", org10, usedFormat); 
    //UNit for 5th area
    createEntity(areaUri + "('BA%20Europe%20North%20&%20Central')/Units", org2, usedFormat);
    createEntity(areaUri + "('BA%20Europe%20North%20&%20Central')/Units", org1, usedFormat);
    createEntity(areaUri + "('BA%20Europe%20North%20&%20Central')/Units", org3, usedFormat);
    createEntity(areaUri + "('BA%20Europe%20North%20&%20Central')/Units", org4, usedFormat);
    createEntity(areaUri + "('BA%20Europe%20North%20&%20Central')/Units", org5, usedFormat);
    createEntity(areaUri + "('BA%20Europe%20North%20&%20Central')/Units", org6, usedFormat);
    createEntity(areaUri + "('BA%20Europe%20North%20&%20Central')/Units", org7, usedFormat);
    createEntity(areaUri + "('BA%20Europe%20North%20&%20Central')/Units", org8, usedFormat);
    createEntity(areaUri + "('BA%20Europe%20North%20&%20Central')/Units", org9, usedFormat);
    createEntity(areaUri + "('BA%20Europe%20North%20&%20Central')/Units", org10, usedFormat); 
    //Units for 6th area
    createEntity(areaUri + "('BA%20Europe%20South')/Units", org1, usedFormat);
    createEntity(areaUri + "('BA%20Europe%20South')/Units", org2, usedFormat);
    createEntity(areaUri + "('BA%20Europe%20South')/Units", org3, usedFormat);
    createEntity(areaUri + "('BA%20Europe%20South')/Units", org4, usedFormat);
    createEntity(areaUri + "('BA%20Europe%20South')/Units", org5, usedFormat);
    createEntity(areaUri + "('BA%20Europe%20South')/Units", org6, usedFormat);
    createEntity(areaUri + "('BA%20Europe%20South')/Units", org7, usedFormat);
    createEntity(areaUri + "('BA%20Europe%20South')/Units", org8, usedFormat);
    createEntity(areaUri + "('BA%20Europe%20South')/Units", org9, usedFormat);
    createEntity(areaUri + "('BA%20Europe%20South')/Units", org10, usedFormat); 
    //Units for 7th area
    createEntity(areaUri + "('BANEC')/Units", org1, usedFormat);
    createEntity(areaUri + "('BANEC')/Units", org2, usedFormat);
    createEntity(areaUri + "('BANEC')/Units", org3, usedFormat);
    createEntity(areaUri + "('BANEC')/Units", org4, usedFormat);
    createEntity(areaUri + "('BANEC')/Units", org5, usedFormat);
    createEntity(areaUri + "('BANEC')/Units", org6, usedFormat);
    createEntity(areaUri + "('BANEC')/Units", org7, usedFormat);
    createEntity(areaUri + "('BANEC')/Units", org8, usedFormat);
    createEntity(areaUri + "('BANEC')/Units", org9, usedFormat);
    createEntity(areaUri + "('BANEC')/Units", org10, usedFormat); 
    //UNits for 8th area
    createEntity(areaUri + "('Biopharm%20TrialOps')/Units", org1, usedFormat);
    createEntity(areaUri + "('Biopharm%20TrialOps')/Units", org2, usedFormat);
    createEntity(areaUri + "('Biopharm%20TrialOps')/Units", org3, usedFormat);
    createEntity(areaUri + "('Biopharm%20TrialOps')/Units", org4, usedFormat);
    createEntity(areaUri + "('Biopharm%20TrialOps')/Units", org5, usedFormat);
    createEntity(areaUri + "('Biopharm%20TrialOps')/Units", org6, usedFormat);
    createEntity(areaUri + "('Biopharm%20TrialOps')/Units", org7, usedFormat);
    createEntity(areaUri + "('Biopharm%20TrialOps')/Units", org8, usedFormat);
    createEntity(areaUri + "('Biopharm%20TrialOps')/Units", org9, usedFormat);
    createEntity(areaUri + "('Biopharm%20TrialOps')/Units", org10, usedFormat); 
    //Units for 9th area
    createEntity(areaUri + "('CMR')/Units", org1, usedFormat);
    createEntity(areaUri + "('CMR')/Units", org2, usedFormat);
    createEntity(areaUri + "('CMR')/Units", org3, usedFormat);
    createEntity(areaUri + "('CMR')/Units", org4, usedFormat);
    createEntity(areaUri + "('CMR')/Units", org5, usedFormat);
    createEntity(areaUri + "('CMR')/Units", org6, usedFormat);
    createEntity(areaUri + "('CMR')/Units", org7, usedFormat);
    createEntity(areaUri + "('CMR')/Units", org8, usedFormat);
    createEntity(areaUri + "('CMR')/Units", org9, usedFormat);
    createEntity(areaUri + "('CMR')/Units", org10, usedFormat); 
    //Units for 10th area
    createEntity(areaUri + "('CMR%20DE')/Units", org1, usedFormat);
    createEntity(areaUri + "('CMR%20DE')/Units", org2, usedFormat);
    createEntity(areaUri + "('CMR%20DE')/Units", org3, usedFormat);
    createEntity(areaUri + "('CMR%20DE')/Units", org4, usedFormat);
    createEntity(areaUri + "('CMR%20DE')/Units", org5, usedFormat);
    createEntity(areaUri + "('CMR%20DE')/Units", org6, usedFormat);
    createEntity(areaUri + "('CMR%20DE')/Units", org7, usedFormat);
    createEntity(areaUri + "('CMR%20DE')/Units", org8, usedFormat);
    createEntity(areaUri + "('CMR%20DE')/Units", org9, usedFormat);
    createEntity(areaUri + "('CMR%20DE')/Units", org10, usedFormat); 
    //UNits for 11th area
    createEntity(areaUri + "('CMR%20EU%20N%26C')/Units", org1, usedFormat);
    createEntity(areaUri + "('CMR%20EU%20N%26C')/Units", org2, usedFormat);
    createEntity(areaUri + "('CMR%20EU%20N%26C')/Units", org3, usedFormat);
    createEntity(areaUri + "('CMR%20EU%20N%26C')/Units", org4, usedFormat);
    createEntity(areaUri + "('CMR%20EU%20N%26C')/Units", org5, usedFormat);
    createEntity(areaUri + "('CMR%20EU%20N%26C')/Units", org6, usedFormat);
    createEntity(areaUri + "('CMR%20EU%20N%26C')/Units", org7, usedFormat);
    createEntity(areaUri + "('CMR%20EU%20N%26C')/Units", org8, usedFormat);
    createEntity(areaUri + "('CMR%20EU%20N%26C')/Units", org9, usedFormat);
    createEntity(areaUri + "('CMR%20EU%20N%26C')/Units", org10, usedFormat); 
    //Units for 12th area
    createEntity(areaUri + "('CMR%20Operations')/Units", org1, usedFormat);
    createEntity(areaUri + "('CMR%20Operations')/Units", org2, usedFormat);
    createEntity(areaUri + "('CMR%20Operations')/Units", org3, usedFormat);
    createEntity(areaUri + "('CMR%20Operations')/Units", org4, usedFormat);
    createEntity(areaUri + "('CMR%20Operations')/Units", org5, usedFormat);
    createEntity(areaUri + "('CMR%20Operations')/Units", org6, usedFormat);
    createEntity(areaUri + "('CMR%20Operations')/Units", org7, usedFormat);
    createEntity(areaUri + "('CMR%20Operations')/Units", org8, usedFormat);
    createEntity(areaUri + "('CMR%20Operations')/Units", org9, usedFormat);
    createEntity(areaUri + "('CMR%20Operations')/Units", org10, usedFormat); 
    //Units for 13th area
    createEntity(areaUri + "('Clinical%20Development%20%26%20Outcomes%20Research')/Units", org1, usedFormat);
    createEntity(areaUri + "('Clinical%20Development%20%26%20Outcomes%20Research')/Units", org2, usedFormat);
    createEntity(areaUri + "('Clinical%20Development%20%26%20Outcomes%20Research')/Units", org3, usedFormat);
    createEntity(areaUri + "('Clinical%20Development%20%26%20Outcomes%20Research')/Units", org4, usedFormat);
    createEntity(areaUri + "('Clinical%20Development%20%26%20Outcomes%20Research')/Units", org5, usedFormat);
    createEntity(areaUri + "('Clinical%20Development%20%26%20Outcomes%20Research')/Units", org6, usedFormat);
    createEntity(areaUri + "('Clinical%20Development%20%26%20Outcomes%20Research')/Units", org7, usedFormat);
    createEntity(areaUri + "('Clinical%20Development%20%26%20Outcomes%20Research')/Units", org8, usedFormat);
    createEntity(areaUri + "('Clinical%20Development%20%26%20Outcomes%20Research')/Units", org9, usedFormat);
    createEntity(areaUri + "('Clinical%20Development%20%26%20Outcomes%20Research')/Units", org10, usedFormat); 
    //Units for 14th area
    createEntity(areaUri + "('Clinical%20Pharmacology')/Units", org1, usedFormat);
    createEntity(areaUri + "('Clinical%20Pharmacology')/Units", org2, usedFormat);
    createEntity(areaUri + "('Clinical%20Pharmacology')/Units", org3, usedFormat);
    createEntity(areaUri + "('Clinical%20Pharmacology')/Units", org4, usedFormat);
    createEntity(areaUri + "('Clinical%20Pharmacology')/Units", org5, usedFormat);
    createEntity(areaUri + "('Clinical%20Pharmacology')/Units", org6, usedFormat);
    createEntity(areaUri + "('Clinical%20Pharmacology')/Units", org7, usedFormat);
    createEntity(areaUri + "('Clinical%20Pharmacology')/Units", org8, usedFormat);
    createEntity(areaUri + "('Clinical%20Pharmacology')/Units", org9, usedFormat);
    createEntity(areaUri + "('Clinical%20Pharmacology')/Units", org10, usedFormat); 
    //Units for 15th area
    createEntity(areaUri + "('Clinical%20Systems%20Management')/Units", org1, usedFormat);
    createEntity(areaUri + "('Clinical%20Systems%20Management')/Units", org2, usedFormat);
    createEntity(areaUri + "('Clinical%20Systems%20Management')/Units", org3, usedFormat);
    createEntity(areaUri + "('Clinical%20Systems%20Management')/Units", org4, usedFormat);
    createEntity(areaUri + "('Clinical%20Systems%20Management')/Units", org5, usedFormat);
    createEntity(areaUri + "('Clinical%20Systems%20Management')/Units", org6, usedFormat);
    createEntity(areaUri + "('Clinical%20Systems%20Management')/Units", org7, usedFormat);
    createEntity(areaUri + "('Clinical%20Systems%20Management')/Units", org8, usedFormat);
    createEntity(areaUri + "('Clinical%20Systems%20Management')/Units", org9, usedFormat);
    createEntity(areaUri + "('Clinical%20Systems%20Management')/Units", org10, usedFormat); 
    //Units for 16th area
    createEntity(areaUri + "('Clinical%20Trial%20Management')/Units", org1, usedFormat);
    createEntity(areaUri + "('Clinical%20Trial%20Management')/Units", org2, usedFormat);
    createEntity(areaUri + "('Clinical%20Trial%20Management')/Units", org3, usedFormat);
    createEntity(areaUri + "('Clinical%20Trial%20Management')/Units", org4, usedFormat);
    createEntity(areaUri + "('Clinical%20Trial%20Management')/Units", org5, usedFormat);
    createEntity(areaUri + "('Clinical%20Trial%20Management')/Units", org6, usedFormat);
    createEntity(areaUri + "('Clinical%20Trial%20Management')/Units", org7, usedFormat);
    createEntity(areaUri + "('Clinical%20Trial%20Management')/Units", org8, usedFormat);
    createEntity(areaUri + "('Clinical%20Trial%20Management')/Units", org9, usedFormat);
    createEntity(areaUri + "('Clinical%20Trial%20Management')/Units", org10, usedFormat); 
    //Units for 17th area
    createEntity(areaUri + "('EU%20CMR%20Medical%20%26%20Scientific%20Affairs')/Units", org1, usedFormat);
    createEntity(areaUri + "('EU%20CMR%20Medical%20%26%20Scientific%20Affairs')/Units", org2, usedFormat);
    createEntity(areaUri + "('EU%20CMR%20Medical%20%26%20Scientific%20Affairs')/Units", org3, usedFormat);
    createEntity(areaUri + "('EU%20CMR%20Medical%20%26%20Scientific%20Affairs')/Units", org4, usedFormat);
    createEntity(areaUri + "('EU%20CMR%20Medical%20%26%20Scientific%20Affairs')/Units", org5, usedFormat);
    createEntity(areaUri + "('EU%20CMR%20Medical%20%26%20Scientific%20Affairs')/Units", org6, usedFormat);
    createEntity(areaUri + "('EU%20CMR%20Medical%20%26%20Scientific%20Affairs')/Units", org7, usedFormat);
    createEntity(areaUri + "('EU%20CMR%20Medical%20%26%20Scientific%20Affairs')/Units", org8, usedFormat);
    createEntity(areaUri + "('EU%20CMR%20Medical%20%26%20Scientific%20Affairs')/Units", org9, usedFormat);
    createEntity(areaUri + "('EU%20CMR%20Medical%20%26%20Scientific%20Affairs')/Units", org10, usedFormat); 
    //Units for 18th area
    createEntity(areaUri + "('Global%20Development%20-%20GSC%20Bangalore')/Units", org1, usedFormat);
    createEntity(areaUri + "('Global%20Development%20-%20GSC%20Bangalore')/Units", org2, usedFormat);
    createEntity(areaUri + "('Global%20Development%20-%20GSC%20Bangalore')/Units", org3, usedFormat);
    createEntity(areaUri + "('Global%20Development%20-%20GSC%20Bangalore')/Units", org4, usedFormat);
    createEntity(areaUri + "('Global%20Development%20-%20GSC%20Bangalore')/Units", org5, usedFormat);
    createEntity(areaUri + "('Global%20Development%20-%20GSC%20Bangalore')/Units", org6, usedFormat);
    createEntity(areaUri + "('Global%20Development%20-%20GSC%20Bangalore')/Units", org7, usedFormat);
    createEntity(areaUri + "('Global%20Development%20-%20GSC%20Bangalore')/Units", org8, usedFormat);
    createEntity(areaUri + "('Global%20Development%20-%20GSC%20Bangalore')/Units", org9, usedFormat);
    createEntity(areaUri + "('Global%20Development%20-%20GSC%20Bangalore')/Units", org10, usedFormat); 
    //Units for 19th area
    createEntity(areaUri + "('Global%20Medical%20Affairs')/Units", org1, usedFormat);
    createEntity(areaUri + "('Global%20Medical%20Affairs')/Units", org2, usedFormat);
    createEntity(areaUri + "('Global%20Medical%20Affairs')/Units", org3, usedFormat);
    createEntity(areaUri + "('Global%20Medical%20Affairs')/Units", org4, usedFormat);
    createEntity(areaUri + "('Global%20Medical%20Affairs')/Units", org5, usedFormat);
    createEntity(areaUri + "('Global%20Medical%20Affairs')/Units", org6, usedFormat);
    createEntity(areaUri + "('Global%20Medical%20Affairs')/Units", org7, usedFormat);
    createEntity(areaUri + "('Global%20Medical%20Affairs')/Units", org8, usedFormat);
    createEntity(areaUri + "('Global%20Medical%20Affairs')/Units", org9, usedFormat);
    createEntity(areaUri + "('Global%20Medical%20Affairs')/Units", org10, usedFormat); 
    //Units for 20th area
    createEntity(areaUri + "('Global%20Regulatory%20Operations')/Units", org1, usedFormat);
    createEntity(areaUri + "('Global%20Regulatory%20Operations')/Units", org2, usedFormat);
    createEntity(areaUri + "('Global%20Regulatory%20Operations')/Units", org3, usedFormat);
    createEntity(areaUri + "('Global%20Regulatory%20Operations')/Units", org4, usedFormat);
    createEntity(areaUri + "('Global%20Regulatory%20Operations')/Units", org5, usedFormat);
    createEntity(areaUri + "('Global%20Regulatory%20Operations')/Units", org6, usedFormat);
    createEntity(areaUri + "('Global%20Regulatory%20Operations')/Units", org7, usedFormat);
    createEntity(areaUri + "('Global%20Regulatory%20Operations')/Units", org8, usedFormat);
    createEntity(areaUri + "('Global%20Regulatory%20Operations')/Units", org9, usedFormat);
    createEntity(areaUri + "('Global%20Regulatory%20Operations')/Units", org10, usedFormat); 
    //Units for 21th area
    createEntity(areaUri + "('Global%20Safety')/Units", org1, usedFormat);
    createEntity(areaUri + "('Global%20Safety')/Units", org2, usedFormat);
    createEntity(areaUri + "('Global%20Safety')/Units", org3, usedFormat);
    createEntity(areaUri + "('Global%20Safety')/Units", org4, usedFormat);
    createEntity(areaUri + "('Global%20Safety')/Units", org5, usedFormat);
    createEntity(areaUri + "('Global%20Safety')/Units", org6, usedFormat);
    createEntity(areaUri + "('Global%20Safety')/Units", org7, usedFormat);
    createEntity(areaUri + "('Global%20Safety')/Units", org8, usedFormat);
    createEntity(areaUri + "('Global%20Safety')/Units", org9, usedFormat);
    createEntity(areaUri + "('Global%20Safety')/Units", org10, usedFormat); 
    //Units for 22th area
    createEntity(areaUri + "('Region%20Europe')/Units", org1, usedFormat);
    createEntity(areaUri + "('Region%20Europe')/Units", org2, usedFormat);
    createEntity(areaUri + "('Region%20Europe')/Units", org3, usedFormat);
    createEntity(areaUri + "('Region%20Europe')/Units", org4, usedFormat);
    createEntity(areaUri + "('Region%20Europe')/Units", org5, usedFormat);
    createEntity(areaUri + "('Region%20Europe')/Units", org6, usedFormat);
    createEntity(areaUri + "('Region%20Europe')/Units", org7, usedFormat);
    createEntity(areaUri + "('Region%20Europe')/Units", org8, usedFormat);
    createEntity(areaUri + "('Region%20Europe')/Units", org9, usedFormat);
    createEntity(areaUri + "('Region%20Europe')/Units", org10, usedFormat); 
    //Units for 23th area
    createEntity(areaUri + "('Strategic%20Development')/Units", org1, usedFormat);
    createEntity(areaUri + "('Strategic%20Development')/Units", org2, usedFormat);
    createEntity(areaUri + "('Strategic%20Development')/Units", org3, usedFormat);
    createEntity(areaUri + "('Strategic%20Development')/Units", org4, usedFormat);
    createEntity(areaUri + "('Strategic%20Development')/Units", org5, usedFormat);
    createEntity(areaUri + "('Strategic%20Development')/Units", org6, usedFormat);
    createEntity(areaUri + "('Strategic%20Development')/Units", org7, usedFormat);
    createEntity(areaUri + "('Strategic%20Development')/Units", org8, usedFormat);
    createEntity(areaUri + "('Strategic%20Development')/Units", org9, usedFormat);
    createEntity(areaUri + "('Strategic%20Development')/Units", org10, usedFormat); 
    //Units for 24th area
    createEntity(areaUri + "('TrialOps%20Obesity')/Units", org1, usedFormat);
    createEntity(areaUri + "('TrialOps%20Obesity')/Units", org2, usedFormat);
    createEntity(areaUri + "('TrialOps%20Obesity')/Units", org3, usedFormat);
    createEntity(areaUri + "('TrialOps%20Obesity')/Units", org4, usedFormat);
    createEntity(areaUri + "('TrialOps%20Obesity')/Units", org5, usedFormat);
    createEntity(areaUri + "('TrialOps%20Obesity')/Units", org6, usedFormat);
    createEntity(areaUri + "('TrialOps%20Obesity')/Units", org7, usedFormat);
    createEntity(areaUri + "('TrialOps%20Obesity')/Units", org8, usedFormat);
    createEntity(areaUri + "('TrialOps%20Obesity')/Units", org9, usedFormat);
    createEntity(areaUri + "('TrialOps%20Obesity')/Units", org10, usedFormat);
  


    /**
    * Worker data
    */
    String workerUri = serviceUrl + "/Workers";
    int numberOfWorkers = 20;

    for (int i = 0; i < numberOfWorkers ; i++) {
      String worker1 = "{\"Name\":\"" + i + "\"}";
      createEntity(workerUri, worker1, usedFormat);
    }


    /**
     * WorkUnit data
     */

    String workeUnitUri = serviceUrl + "/WorkUnits";

    Random rng = new Random();
    rng.setSeed(1000L);

    // Gaussian distribution standard deviation
    double sigma = 10;

    int numberOfYears = 4;
    for (int year = 2015; year < (2015 + numberOfYears) ; year++) {
      print("we are in year:" + year);
      for (int month = 1; month < 13 ; month++) {
        Date newDate = new Date(year, month, 1);
        
        


        for (int worker = 0; worker < numberOfWorkers ; worker++) {
          Double val;
          print("we are creating WUnits with val:");
          do {
            val = (sigma * rng.nextGaussian()) + 60;
            print(""+val);
          } while (val < 5 || val > 120);
          print(""+val);
          String hours = "\"" + String.format("%4.3f", val) + "\""; 

          String dateString = "\"/Date(" + newDate.getTime() + ")/\"";
          
          //newDate.getDate()
          String workUnit = "{\"Name\":\"" + year + month + worker + "\",\"hours\":" + hours + ",\"date\":" + dateString + "}";
          print(workUnit);
          createEntity(workeUnitUri, workUnit, usedFormat);

          //createEntity(workeUnitUri + "('" + year + month + worker +"')/unit", org1, usedFormat);
        }        
        

      }
      



    }



    //Old parsing stuff
    String manufacturerStar = "{\"Id\":\"1\",\"Name\":\"Star Powered Racing\",\"Founded\":\"/Date(-489024000000+0060)/\"," +
            "\"Address\":{\"Street\":\"Star Street 137\",\"City\":\"Stuttgart\",\"ZipCode\":\"70173\",\"Country\":\"Germany\"}}";
    String manufacturerHorse = "{\"Id\":\"2\",\"Name\":\"Horse Powered Racing\",\"Founded\":\"/Date(-1266278400000+0060)/\"," +
            "\"Address\":{\"Street\":\"Horse Street 1\",\"City\":\"Maranello\",\"ZipCode\":\"41053\",\"Country\":\"Italy\"}}";

    String manufacturersUri = serviceUrl + "/Manufacturers";
    createEntity(manufacturersUri, manufacturerStar, usedFormat);
    createEntity(manufacturersUri, manufacturerHorse, usedFormat);

    String carOneWithInlineDriverOne =
            "{\"Id\":\"1\",\"Model\":\"F1 W02\",\"Price\":\"167189.0\",\"ModelYear\":2011,\"Updated\":\"/Date(1392989833964)/\"," +
            "\"Driver\":{\"Id\":\"1\",\"Name\":\"Mic\",\"Lastname\":\"Shoemaker\",\"Nickname\":\"The Fast\",\"Birthday\":\"/Date(488671200000)/\"}}";
            print("CAR:");
            print(carOneWithInlineDriverOne);
    String carTwoWithInlineDriverTwo =
            "{\"Id\":\"2\",\"Model\":\"F1 W04\",\"Price\":\"242189.99\",\"ModelYear\":2013,\"Updated\":\"/Date(1392990355793)/\"," +
            "\"Driver\":{\"Id\":\"2\",\"Name\":\"Nico\",\"Lastname\":\"Mulemountain\",\"Nickname\":null,\"Birthday\":\"/Date(-31366800000)/\"}}";
    String carThreeWithInlineDriverThree =
            "{\"Id\":\"3\",\"Model\":\"FF2013\",\"Price\":\"199189.11\",\"ModelYear\":2013,\"Updated\":\"/Date(1392990355793)/\"," +
            "\"Driver\":{\"Id\":\"3\",\"Name\":\"Kimi\",\"Lastname\":\"Heikkinen\",\"Nickname\":\"Iceman\",\"Birthday\":\"/Date(308962800000)/\"}}";
    String carFour = "{\"Id\":\"4\",\"Model\":\"FF2014\",\"Price\":\"299189.11\",\"ModelYear\":2014,\"Updated\":\"/Date(1392973616419)/\"}";

    createEntity(manufacturersUri + "('1')/Cars", carOneWithInlineDriverOne, usedFormat);
    createEntity(manufacturersUri + "('1')/Cars", carTwoWithInlineDriverTwo, usedFormat);
    createEntity(manufacturersUri + "('2')/Cars", carThreeWithInlineDriverThree, usedFormat);
    createEntity(manufacturersUri + "('2')/Cars", carFour, usedFormat);
  }

  private void createEntity(String absoluteUri, String content, String contentType) {
    try {
      writeEntity(absoluteUri, content, contentType, HTTP_METHOD_POST);
    } catch (IOException e) {
      throw new RuntimeException("Exception during data source initialization generation.", e);
    } catch (URISyntaxException e) {
      throw new RuntimeException("Exception during data source initialization generation.", e);
    }
  }

  private void writeEntity(String absoluteUri, String content, String contentType, String httpMethod)
      throws IOException, URISyntaxException {

    print(httpMethod + " request on uri: " + absoluteUri + ":\n  " + content + "\n");
    //
    HttpURLConnection connection = initializeConnection(absoluteUri, contentType, httpMethod);
    byte[] buffer = content.getBytes("UTF-8");
    connection.getOutputStream().write(buffer);

    // if a entity is created (via POST request) the response body contains the new created entity
    HttpStatusCodes statusCode = HttpStatusCodes.fromStatusCode(connection.getResponseCode());
    if(statusCode == HttpStatusCodes.CREATED) {
      // get the content as InputStream and de-serialize it into an ODataEntry object
      InputStream responseContent = connection.getInputStream();
      logRawContent(httpMethod + " response:\n  ", responseContent, "\n");
    } else if(statusCode == HttpStatusCodes.NO_CONTENT) {
      print("No content.");
    } else {
      checkStatus(connection);
    }

    //
    connection.disconnect();
  }

  private void print(String content) {
    LOG.info(content);
  }


  private HttpStatusCodes checkStatus(HttpURLConnection connection) throws IOException {
    HttpStatusCodes httpStatusCode = HttpStatusCodes.fromStatusCode(connection.getResponseCode());
    if (400 <= httpStatusCode.getStatusCode() && httpStatusCode.getStatusCode() <= 599) {
      connection.disconnect();
      throw new RuntimeException("Http Connection failed with status " + httpStatusCode.getStatusCode() + " " + httpStatusCode.toString());
    }
    return httpStatusCode;
  }

  private InputStream logRawContent(String prefix, InputStream content, String postfix) throws IOException {
    if(PRINT_RAW_CONTENT) {
      byte[] buffer = streamToArray(content);
      print(prefix + new String(buffer, "UTF-8") + postfix);
      return new ByteArrayInputStream(buffer);
    }
    return content;
  }


  private HttpURLConnection initializeConnection(String absoluteUri, String contentType, String httpMethod)
          throws IOException {
    URL url = new URL(absoluteUri);
    HttpURLConnection connection = (HttpURLConnection) url.openConnection();

    connection.setRequestMethod(httpMethod);
    connection.setRequestProperty(HTTP_HEADER_ACCEPT, contentType);
    if(HTTP_METHOD_POST.equals(httpMethod) || HTTP_METHOD_PUT.equals(httpMethod)) {
      connection.setDoOutput(true);
      connection.setRequestProperty(HTTP_HEADER_CONTENT_TYPE, contentType);
    }

    return connection;
  }


  private byte[] streamToArray(InputStream stream) throws IOException {
    byte[] result = new byte[0];
    byte[] tmp = new byte[8192];
    int readCount = stream.read(tmp);
    while(readCount >= 0) {
      byte[] innerTmp = new byte[result.length + readCount];
      System.arraycopy(result, 0, innerTmp, 0, result.length);
      System.arraycopy(tmp, 0, innerTmp, result.length, readCount);
      result = innerTmp;
      readCount = stream.read(tmp);
    }
    stream.close();
    return result;
  }
}